import { QuickSightClientResolvedConfig, ServiceInputTypes, ServiceOutputTypes } from "../QuickSightClient";
import { TagResourceRequest, TagResourceResponse } from "../models/models_1";
import { Command as $Command } from "@aws-sdk/smithy-client";
import { Handler, MiddlewareStack, HttpHandlerOptions as __HttpHandlerOptions, MetadataBearer as __MetadataBearer } from "@aws-sdk/types";
export declare type TagResourceCommandInput = TagResourceRequest;
export declare type TagResourceCommandOutput = TagResourceResponse & __MetadataBearer;
/**
 * <p>Assigns one or more tags (key-value pairs) to the specified QuickSight resource. </p>
 * 		       <p>Tags can help you organize and categorize your resources. You can also use them to
 * 			scope user permissions, by granting a user permission to access or change only resources
 * 			with certain tag values. You can use the <code>TagResource</code> operation with a
 * 			resource that already has tags. If you specify a new tag key for the resource, this tag
 * 			is appended to the list of tags associated with the resource. If you specify a tag key
 * 			that is already associated with the resource, the new tag value that you specify
 * 			replaces the previous value for that tag.</p>
 * 		       <p>You can associate as many as 50 tags with a resource. QuickSight supports tagging on data
 * 			set, data source, dashboard, and template. </p>
 * 		       <p>Tagging for QuickSight works in a similar way to tagging for other AWS services, except for
 * 			the following:</p>
 * 		       <ul>
 *             <li>
 *                <p>You can't use tags to track AWS costs for QuickSight. This restriction is because QuickSight
 * 					costs are based on users and SPICE capacity, which aren't taggable
 * 					resources.</p>
 *             </li>
 *             <li>
 *                <p>QuickSight doesn't currently support the Tag Editor for AWS Resource Groups.</p>
 *             </li>
 *          </ul>
 */
export declare class TagResourceCommand extends $Command<TagResourceCommandInput, TagResourceCommandOutput, QuickSightClientResolvedConfig> {
    readonly input: TagResourceCommandInput;
    constructor(input: TagResourceCommandInput);
    /**
     * @internal
     */
    resolveMiddleware(clientStack: MiddlewareStack<ServiceInputTypes, ServiceOutputTypes>, configuration: QuickSightClientResolvedConfig, options?: __HttpHandlerOptions): Handler<TagResourceCommandInput, TagResourceCommandOutput>;
    private serialize;
    private deserialize;
}
